{"version":3,"sources":["app/redux/actions.ts","app/steps/Steps.ts","app/StepDisplay.tsx","app/ImageCompareView.tsx","app/redux/constants.ts","app/steps/Instructions.tsx","app/OptionView.tsx","app/SettingsView.tsx","app/TakeImageView.tsx","app/ImageUpload.tsx","app/GetImage.tsx","app/StepContentDisplay.tsx","app/Main.tsx","app/redux/reducer.ts","app/redux/store.ts","index.tsx","serviceWorker.ts"],"names":["setImage","imageName","imageData","type","payload","steps","addStep","name","canSkip","number","length","data","push","STEP_INTRO","STEP_SETTINGS","STEP_BEFORE_PHOTO","STEP_AFTER_PHOTO","STEP_COMPARE","STEPS","assertStepInBounds","step","throwError","isInBounds","Error","getLastAccessibleStepIndex","completedSteps","i","console","debug","StepDisplay","renderStep","onClick","classes","props","lastSelectableStep","currentStep","goToStep","className","join","key","map","this","React","Component","connect","state","ownProps","completed","current","dispatch","index","ImageCompareView","imageVersion","resembleCallback","error","diffImageData","getImageDataUrl","setDiffImage","updateDiffImageIfNeeded","src","alt","href","download","currentVersion","afterImage","updateCount","beforeImage","after","before","compare","output","errorType","largeImageThreshold","useCrossOrigin","outputDiff","scaleToSameSize","ignore","images","diff","InstructionsView","ChooseOptionView","onChange","event","target","value","disabled","hidden","prompt","options","SOURCES","SettingsView","OptionView","imageSource","setImageSource","settings","VIDEO_CONSTRAINTS","facingMode","ideal","width","height","TakeImageView","webcamRef","photo","getScreenshot","onPhoto","createRef","bgImg","backgroundImage","ref","audio","videoConstraints","forceScreenshotSourceSize","ImageUrlUploader","e","files","fileReader","FileReader","onload","onFileUploaded","readAsDataURL","result","GetImageView","renderContents","onImage","ImageUpload","StepContentView","takeBeforeImage","image","setBeforeImage","completeStep","takeAfterImage","setAfterImage","Steps","renderWithNextButton","GetImage","beforeImageData","component","afterImageData","MainView","modifyImageState","oldSubState","newData","reducer","action","warn","fallbackState","imageStateCopy","img","document","createElement","log","naturalWidth","naturalHeight","debug_print_image_size","handle_setImage","next","Math","max","handle_completeStep","handle_goToStep","handle_setImageSource","DEFAULT_IMAGE_STATE","devTools","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2RAgDA,SAASA,EAASC,EAAmBC,GACnC,MAAO,CACLC,KA7CqB,YA8CrBC,QAAS,CACPH,UAAWA,EACXC,UAAWA,IC9CjB,IAAIG,EAAoB,GAExB,SAASC,EAAQC,GAAiD,IAAnCC,EAAkC,wDAC3DC,EAASJ,EAAMK,OACfC,EAAiB,CAAEF,OAAQA,EAAQF,KAAMA,EAAMC,QAASA,GAE5D,OADAH,EAAMO,KAAKD,GACJF,EAGF,IAAMI,EAAaP,EAAQ,SAAS,GAC9BQ,EAAgBR,EAAQ,YAAY,GACpCS,EAAoBT,EAAQ,gBAC5BU,EAAmBV,EAAQ,eAC3BW,EAAeX,EAAQ,kBAEvBY,EAAQb,EAGd,SAASc,EAAmBC,GAAqD,IAAvCC,EAAsC,wDACjFC,EAAaF,GAAQ,GAAKA,EAAOF,EAAMR,OAC3C,GAAIW,IAAeC,EACjB,MAAM,IAAIC,MAAJ,iCAAoCH,IAE5C,OAAOE,EAGF,SAASE,EAA2BC,GACzCN,EAAmBM,GAAgB,GAEnC,IAAK,IAAIC,EAAID,EAAgBC,EAAIR,EAAMR,OAAQgB,IAC7C,IAAKR,EAAMQ,GAAGlB,QAEZ,OAAOkB,EAGX,OAAOR,EAAMR,OAAS,EAnBxBiB,QAAQC,MAAMvB,G,ICTRwB,E,4MASJC,WAAa,SAACV,GACZ,IACIW,EADAC,EAAU,CAAC,QAYf,OAVIZ,EAAKX,QAAU,EAAKwB,MAAMC,mBACxBd,EAAKX,SAAW,EAAKwB,MAAME,YAC7BH,EAAQpB,KAAK,aAEboB,EAAQpB,KAAK,cACbmB,EAAU,kBAAM,EAAKE,MAAMG,SAAShB,EAAKX,UAG3CuB,EAAQpB,KAAK,YAER,wBAAIyB,UAAWL,EAAQM,KAAK,KAAMC,IAAKnB,EAAKX,OAAQsB,QAASA,GACjEX,EAAKb,O,uDArBR,OACE,wBAAI8B,UAAU,aACXnB,EAAMsB,IAAIC,KAAKX,iB,GAJEY,IAAMC,WAyCjBC,eAbS,SAACC,EAAmBC,GAC1C,OAAO,2BACFA,GADL,IAEEZ,mBAAoBW,EAAMxC,MAAM0C,UAChCZ,YAAaU,EAAMxC,MAAM2C,aAGF,SAACC,GAC1B,MAAO,CACLb,SAAU,SAACc,GAAD,OAAmBD,EFYxB,CAAE9C,KAxDe,aAwDGC,QEZsB8C,QAIpCN,CAA6Cf,G,QCtCtDsB,E,kDAGJ,WAAYlB,GAAe,IAAD,8BACxB,cAAMA,IAHRmB,kBAE0B,IAmD1BC,iBAAmB,SAACC,EAAY3C,GAC9B,GAAI2C,EACF3B,QAAQ2B,MAAM,gDAAiDA,OAC1D,CACL,IAAMC,EAAwB5C,EAAK6C,kBACnC,EAAKvB,MAAMwB,aAAaF,KAtD1B,EAAKH,cAAgB,EACrB,EAAKP,MAAQ,GAHW,E,qDASxB,OAFAJ,KAAKiB,0BAEAjB,KAAKR,MAAMsB,cAKd,yBAAKlB,UAAU,aACb,0CACA,0DAFF,gQAME,yBAAKsB,IAAKlB,KAAKR,MAAMsB,cAAeK,IAAI,sDACxC,uBAAGvB,UAAU,kBAAkBwB,KAAMpB,KAAKR,MAAMsB,cAAeO,SAAS,8BAAxE,mBAXK,0BAAMzB,UAAU,WAAhB,4C,gDAmBT,IAAM0B,EAAiBtB,KAAKR,MAAM+B,WAAWC,YAAcxB,KAAKR,MAAMiC,YAAYD,YAClF,GAAIF,IAAmBtB,KAAKW,aAAc,CACxCX,KAAKW,aAAeW,EACpB,IAAMI,EAAQ1B,KAAKR,MAAM+B,WAAWrD,KAC9ByD,EAAS3B,KAAKR,MAAMiC,YAAYvD,KACtC,GAAIwD,GAASC,EAAQ,CAYnBC,kBAAQD,EAAQD,EAXA,CACdG,OAAQ,CACNC,UAAW,8BAEXC,oBAAqB,KACrBC,gBAAgB,EAChBC,YAAY,GAEdC,iBAAiB,EACjBC,OAAQ,UAEsBnC,KAAKY,wB,GAjDdX,IAAMC,WA8EtBC,eAdS,SAACC,EAAmBC,GAC1C,OAAO,2BACFA,GADL,IAEEoB,YAAarB,EAAMgC,OAAOT,OAC1BJ,WAAYnB,EAAMgC,OAAOV,MACzBZ,cAAeV,EAAMgC,OAAOC,KAAKnE,UAGV,SAACsC,GAC1B,MAAO,CACLQ,aAAc,SAACvD,GAAD,OAA0B+C,EH/CrC,SAAsB/C,GAC3B,OAAOF,EItCiB,aJsCIE,GG8CuBuD,CAAavD,QAInD0C,CAA6CO,GEpE7C4B,E,uKAtBX,OACE,yBAAK1C,UAAU,gBACb,4CACA,sXAKA,4CACA,4BACE,uDACA,mEACA,6DACA,mFACA,2LACA,wF,GAlBqBK,IAAMC,WC6BtBqC,E,4MAZbC,SAAW,SAACC,GACV,EAAKjD,MAAMgD,SAASC,EAAMC,OAAOC,Q,uDAZjC,OAAQ,4BAAQH,SAAUxC,KAAKwC,SAAUG,MAAO3C,KAAKR,MAAMmD,OACzD,4BAAQA,MAAM,GAAG7C,KAAM,EAAG8C,UAAQ,EAACC,QAAM,GACtC7C,KAAKR,MAAMsD,OAAS9C,KAAKR,MAAMsD,OAAS,mBAE1C9C,KAAKR,MAAMuD,QAAQhD,KAAI,SAAC4C,EAAe1D,GAEtC,OAAO,4BAAQ0D,MAAOA,EAAO7C,IAAKb,GAAI0D,U,sCAV1C,MAAO,O,GAFoB1C,IAAMC,WCM/B8C,EAAU,CHPa,aACF,gBGarBC,E,uKAEF,OACE,yBAAKrD,UAAU,YACb,wCACA,0BAAMA,UAAU,SAAhB,iBACA,kBAACsD,EAAD,CAAYH,QAASC,EAASL,MAAO3C,KAAKR,MAAM2D,YAAaX,SAAUxC,KAAKR,MAAM4D,sB,GAN/DnD,IAAMC,WAwBlBC,eAZS,SAACC,EAAmBC,GAC1C,OAAO,2BACFA,GADL,IAEE8C,YAAa/C,EAAMiD,SAASF,iBAGL,SAAC3C,GAC1B,MAAO,CACL4C,eAAgB,SAACT,GAAD,OAAmBnC,EP+BhC,SAAwBmC,GAC7B,MAAO,CAAEjF,KA3DqB,mBA2DGC,QAASgF,GOhCIS,CAAeT,QAIhDxC,CAA6C8C,G,iBCnCtDK,EAAoB,CACxBC,WAAY,CAAEC,MAAO,eAErBC,MAAO,CAAED,MAAO,MAChBE,OAAQ,CAAEF,MAAO,OAmCJG,E,kDAxBb,WAAYnE,GAAe,IAAD,8BACxB,cAAMA,IAHRoE,eAE0B,IAkB1BtE,QAAU,SAACmD,GACT,IAAIoB,EAAQ,EAAKD,UAAUrD,QAAQuD,gBACnC,EAAKtE,MAAMuE,QAAQF,IAlBnB,EAAKD,UAAY3D,IAAM+D,YAFC,E,qDAMxB,IAAMC,EAAQjE,KAAKR,MAAM0E,gBACnBtE,EAAY,kBAAoBqE,EAAQ,mBAAqB,IACnE,OACE,yBAAKrE,UAAWA,GACd,kBAAC,IAAD,CAAQuE,IAAKnE,KAAK4D,UAAWhE,UAAU,MAAMN,QAASU,KAAKV,QACzD8E,OAAO,EAAOC,iBAAkBf,EAChCgB,2BAA2B,IAC5BL,EAAQ,yBAAK/C,IAAK+C,EAAO9C,IAAI,GAAG7B,QAASU,KAAKV,UAAc,U,GAhBzCW,IAAMC,WCoBnBqE,E,kDA1Bb,WAAY/E,GAAe,IAAD,8BACxB,cAAMA,IAURgD,SAAW,SAACgC,GACV,IAAMC,EAAQD,EAAE9B,OAAO+B,MACvB,GAAIA,GAASA,EAAM,GAAI,CACrB,IAAIC,EAAa,IAAIC,WACrBD,EAAWE,OAAS,EAAKC,eACzBH,EAAWI,cAAcL,EAAM,IAEjCD,EAAE9B,OAAOC,MAAQ,MAlBO,EAqB1BkC,eAAiB,SAACpC,GAChB,EAAKjD,MAAMjC,SAASkF,EAAMC,OAAOqC,SApBjC,EAAK3E,MAAQ,GAFW,E,qDAMxB,OACE,2BAAOR,UAAU,eAAelC,KAAK,OAAO8E,SAAUxC,KAAKwC,e,GARlCvC,IAAMC,WCK/B8E,E,uKAEF,OACE,yBAAKpF,UAAU,aACZI,KAAKiF,oB,uCAMV,OAAQjF,KAAKR,MAAM2D,aACjB,INxBuB,aMyBrB,OAAO,6BACL,4CADK,uDAGL,kBAAC,EAAD,CAAeY,QAAS/D,KAAKR,MAAM0F,QAAShB,gBAAiBlE,KAAKR,MAAM0E,kBAHnE,KAKT,IN7BqB,eM8BnB,OAAO,6BACL,+CACA,kBAACiB,EAAD,CAAa5H,SAAUyC,KAAKR,MAAM0F,WAEtC,QACE,MAAM,IAAIpG,MAAJ,iCAAoCkB,KAAKR,MAAM2D,YAA/C,W,GAvBalD,IAAMC,WAuClBC,eAXS,SAACC,EAAmBC,GAC1C,OAAO,2BACFA,GADL,IAEE8C,YAAa/C,EAAMiD,SAASF,iBAGL,SAAC3C,GAC1B,MAAO,KAIML,CAA6C6E,GC9BtDI,E,4MA0BJC,gBAAkB,SAACC,GACjB,EAAK9F,MAAM+F,eAAeD,GAC1B,EAAK9F,MAAMgG,gB,EAGbC,eAAiB,SAACH,GAChB,EAAK9F,MAAMkG,cAAcJ,GACzB,EAAK9F,MAAMgG,gB,uDA/BX,OACE,yBAAK5F,UAAU,gBACZI,KAAKiF,oB,uCAMV,OAAQjF,KAAKR,MAAMb,MACjB,KAAKgH,EACH,OAAO3F,KAAK4F,qBAAqB,kBAAC,EAAD,OACnC,KAAKD,EACH,OAAO3F,KAAK4F,qBAAqB,kBAAC,EAAD,OACnC,KAAKD,EACH,OAAO,kBAACE,EAAD,CAAcX,QAASlF,KAAKqF,kBACrC,KAAKM,EACH,OAAO,kBAACE,EAAD,CAAcX,QAASlF,KAAKyF,eAAgBvB,gBAAiBlE,KAAKR,MAAMsG,kBACjF,KAAKH,EACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,wD,2CAcQI,GACnB,OAAQ,6BACLA,EACD,4BAAQnG,UAAU,cAAcN,QAASU,KAAKR,MAAMgG,cAApD,kB,GAvCwBvF,IAAMC,WAgErBC,eAjBS,SAACC,EAAmBC,GAC1C,OAAO,2BACFA,GADL,IAEEyF,gBAAiB1F,EAAMgC,OAAOT,OAAOzD,KACrC8H,eAAgB5F,EAAMgC,OAAOV,MAAMxD,KACnCS,KAAMyB,EAAMxC,MAAM2C,aAIK,SAACC,GAC1B,MAAO,CACL+E,eAAgB,SAAC9H,GAAD,OAA0B+C,EX7CvC,SAAwB/C,GAC7B,OAAOF,EI/BmB,eJ+BIE,GW4CuB8H,CAAe9H,KAClEiI,cAAe,SAACjI,GAAD,OAA0B+C,EX1CtC,SAAuB/C,GAC5B,OAAOF,EIpCkB,cJoCIE,GWyCuBiI,CAAcjI,KAChE+H,aAAc,kBAAMhF,EXxBf,CAAE9C,KArDkB,sBWiFdyC,CAA6CiF,GC5D7Ca,G,6KAdX,OACE,6BACE,yBAAKrG,UAAU,WAAf,wHAGA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GATaK,IAAMC,Y,WCsG7B,SAASgG,EAAiBC,EAAyBC,GACjD,MAAO,CACLlI,KAAMkI,EACN5E,YAAa2E,EAAY3E,YAAc,GAI5B6E,MAlHf,SAAiBjG,EAA0BkG,GAWzC,OAVKlG,IACHlB,QAAQqH,KAAK,oEACbnG,EAAQoG,GAQFF,EAAO5I,MACb,IbbqB,YacnB,OA8DN,SAAyB0C,EAAckG,GACrC,IAAI3I,EAAW2I,EAAkC3I,QAC7C8I,EAAc,eAAQrG,EAAMgC,QAChC,OAAQzE,EAAQH,WACd,IThFuB,cSiFrBiJ,EAAe/E,MAAQwE,EAAiBO,EAAe/E,MAAO/D,EAAQF,WACtE,MACF,ITlFwB,eSmFtBgJ,EAAe9E,OAASuE,EAAiBO,EAAe9E,OAAQhE,EAAQF,WAgB9E,SAAgCyD,GAC9B,IAAIwF,EAAMC,SAASC,cAAc,OACjCF,EAAI9B,OAAS,SAASnC,GACpBvD,QAAQ2H,IAAR,2BAAgCH,EAAII,aAApC,YAAoDJ,EAAIK,iBAE1DL,EAAIxF,IAAMA,EApBN8F,CAAuBrJ,EAAQF,WAC/B,MACF,ITrFsB,aSsFpBgJ,EAAepE,KAAO6D,EAAiBO,EAAepE,KAAM1E,EAAQF,WACpE,MACF,QAEE,OADAyB,QAAQqH,KAAR,+BAAqC5I,EAAQH,UAA7C,MACO4C,EAEX,OAAO,2BACFA,GADL,IAEEgC,OAAQqE,IAlFCQ,CAAgB7G,EAAOkG,GAEhC,IbfyB,gBagBvB,OAcN,SAA6BlG,GAC3B,IAAI8G,EAAO9G,EAAMxC,MAAM2C,QAAU,EACjC,GAAI7B,EAAmBwI,GAAO,CAC5B,IAAI5G,EAAYvB,EAA2BmI,GAG3C,OADA5G,EAAY6G,KAAKC,IAAIhH,EAAMxC,MAAM0C,UAAWA,GACrC,2BACFF,GADL,IAEExC,MAAO,CACL2C,QAAS2G,EACT5G,UAAWA,KAIf,OAAOF,EA5BEiH,CAAoBjH,GAE7B,IbjBsB,aakBpB,OAwCN,SAAyBA,EAAckG,GACrC,IAAI3H,EAAQ2H,EAAkC3I,QAC9C,OAAIe,EAAmBC,IAASA,GAAQyB,EAAMxC,MAAM0C,UAC3C,2BACFF,GADL,IAEExC,MAAM,2BACDwC,EAAMxC,OADN,IAEH2C,QAAS5B,OAIbO,QAAQqH,KAAR,iCAAuC5H,EAAvC,oBAAuDyB,EAAMxC,QACtDwC,GApDEkH,CAAgBlH,EAAOkG,GAEhC,IbnB4B,mBaoB1B,OA0BN,SAA+BlG,EAAckG,GAC3C,IAAI3D,EAAS2D,EAAuC3I,QACpD,OAAO,2BACFyC,GADL,IAEEiD,SAAS,2BACJjD,EAAMiD,UADH,IAENF,YAAaR,MAhCN4E,CAAsBnH,EAAOkG,GAEtC,QAEE,OADApH,QAAQqH,KAAR,gCAAsCD,EAAO5I,KAA7C,MACO0C,ICJPoH,EAAsB,CAC1BtJ,KAAM,KACNsD,YAAa,GAGFgF,EAAuB,CAClCpE,OAAQ,CACNT,OAAQ6F,EACR9F,MAAO8F,EACPnF,KAAMmF,GAER5J,MAAO,CACL2C,QAAS,EACTD,UAAWvB,EAA2B,IAExCsE,SAAU,CACRF,YV3CyB,eU+CzBsE,OAAWC,EACf,GAAKC,OAAeC,6BAA8B,CAMhDH,EAAYE,OAAeC,6BAJN,CACnBC,OAAO,EACPC,WAAY,KAKhB,IACeC,EADDC,YAAY3B,EAASG,EAAeiB,GCnDlDQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJpB,SAASyB,eAAe,SCsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9H,GACL3B,QAAQ2B,MAAMA,EAAM+H,c","file":"static/js/main.47292294.chunk.js","sourcesContent":["import { ImageData } from './store';\nimport { AFTER_IMAGE, BEFORE_IMAGE, DIFF_IMAGE } from './constants';\n\n\n// action types\nexport const SET_IMAGE = \"SET_IMAGE\";\nexport const COMPLETE_STEP = \"COMPLETE_STEP\";\nexport const GO_TO_STEP = \"GO_TO_STEP\"\nexport const SET_IMAGE_SOURCE = \"SET_IMAGE_SOURCE\";\n\n// actions\nexport interface ActionWithoutPayload {\n  type: string,\n}\n\nexport interface SetImageAction {\n  type: string,\n  payload: {\n    imageName: string,\n    imageData: ImageData,\n  },\n}\n\nexport interface GoToStepAction {\n  type: string,\n  payload: number,\n}\n\nexport interface StringPayloadAction {\n  type: string,\n  payload: string,\n}\n\nexport type Action = SetImageAction | ActionWithoutPayload | StringPayloadAction;\n\n// action creators\nexport function setBeforeImage(imageData: ImageData): SetImageAction {\n  return setImage(BEFORE_IMAGE, imageData);\n}\n\nexport function setAfterImage(imageData: ImageData): SetImageAction {\n  return setImage(AFTER_IMAGE, imageData);\n}\n\nexport function setDiffImage(imageData: ImageData): SetImageAction {\n  return setImage(DIFF_IMAGE, imageData);\n}\n\nfunction setImage(imageName: string, imageData: ImageData): SetImageAction {\n  return {\n    type: SET_IMAGE,\n    payload: {\n      imageName: imageName,\n      imageData: imageData,\n    },\n  };\n}\n\nexport function completedCurrentStep(): ActionWithoutPayload {\n  return { type: COMPLETE_STEP };\n}\n\nexport function goToStep(step: number): GoToStepAction {\n  return { type: GO_TO_STEP, payload: step };\n}\n\nexport function setImageSource(value: string): StringPayloadAction {\n  return { type: SET_IMAGE_SOURCE, payload: value };\n}\n","\nexport interface StepData {\n  number: number,\n  name: string,\n  canSkip: boolean,\n}\n\nlet steps: StepData[] = [];\n\nfunction addStep(name: string, canSkip: boolean = false): number {\n  let number = steps.length;\n  let data: StepData = { number: number, name: name, canSkip: canSkip };\n  steps.push(data);\n  return number;\n}\n\nexport const STEP_INTRO = addStep(\"Intro\", true);\nexport const STEP_SETTINGS = addStep(\"Settings\", true);\nexport const STEP_BEFORE_PHOTO = addStep(\"Before photo\");\nexport const STEP_AFTER_PHOTO = addStep(\"After photo\");\nexport const STEP_COMPARE = addStep(\"Compare photos\");\n\nexport const STEPS = steps;\nconsole.debug(steps);\n\nexport function assertStepInBounds(step: number, throwError: boolean = false): boolean {\n  let isInBounds = step >= 0 && step < STEPS.length;\n  if (throwError && !isInBounds) {\n    throw new Error(`Step is not in bounds: ${step}`);\n  }\n  return isInBounds;\n}\n\nexport function getLastAccessibleStepIndex(completedSteps: number) {\n  assertStepInBounds(completedSteps, true);//throw error if not in bounds\n\n  for (let i = completedSteps; i < STEPS.length; i++) {\n    if (!STEPS[i].canSkip) {\n      // Return the first following non-skippable step\n      return i;\n    }\n  }\n  return STEPS.length - 1;\n}\n\nexport function canAccessStep(step: number, completedSteps: number): boolean {\n  assertStepInBounds(step, true);\n  assertStepInBounds(completedSteps, true);\n\n  if (step <= completedSteps) {\n    // save time calculating stuff\n    return true;\n  } else {\n    return step <= getLastAccessibleStepIndex(completedSteps);\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from './redux/store';\nimport { goToStep } from './redux/actions';\nimport { STEPS, StepData } from './steps/Steps';\n\n\ninterface Props {\n  lastSelectableStep: number,\n  currentStep: number,\n  goToStep: (index: number) => void,\n  completeStep: () => void,\n}\n\nclass StepDisplay extends React.Component<Props> {\n  render() {\n    return (\n      <ul className=\"step-list\">\n        {STEPS.map(this.renderStep)}\n      </ul>\n    );\n  }\n\n  renderStep = (step: StepData) => {\n    let classes = [\"step\"];\n    let onClick;\n    if (step.number <= this.props.lastSelectableStep) {\n      if (step.number === this.props.currentStep) {\n        classes.push(\"selected\");\n      } else {\n        classes.push(\"selectable\");\n        onClick = () => this.props.goToStep(step.number);\n      }\n    } else {\n      classes.push(\"disabled\");\n    }\n    return <li className={classes.join(\" \")} key={step.number} onClick={onClick}>\n      {step.name}\n    </li>;\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    lastSelectableStep: state.steps.completed,\n    currentStep: state.steps.current,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    goToStep: (index: number) => dispatch(goToStep(index)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepDisplay);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { compare } from 'resemblejs';\nimport { State as ReduxState, ImageState, ImageData } from './redux/store';\nimport { setDiffImage } from './redux/actions';\n\n\ninterface Props {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n  diffImageData: ImageData,\n  setDiffImage: (imageData: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass ImageCompareView extends React.Component<Props, State> {\n  imageVersion: number;\n\n  constructor(props: Props) {\n    super(props);\n    this.imageVersion = -1;\n    this.state = {};\n  }\n\n  render() {\n    this.updateDiffImageIfNeeded();\n\n    if (!this.props.diffImageData){\n      return <span className=\"err-msg\">Internal error: can not compare images</span>\n    }\n\n    return (\n      <div className=\"diff-view\">\n        <h2>Comparison</h2>\n        <h3>Automatic change detection</h3>\n        This compares the both images, bug has a poor real world performance due to slight perspective shifts,\n        differences in lighting, etc. If you see poor results, scroll down to perform a manual comparision.\n        All changes that were detected are marked in pink.\n        <img src={this.props.diffImageData} alt=\"Differences between the before and after pictures\" />\n        <a className=\"download-button\" href={this.props.diffImageData} download=\"did_someone_touch_this.png\" >\n          Download image\n        </a>\n      </div>\n    );\n  }\n\n  updateDiffImageIfNeeded() {\n    const currentVersion = this.props.afterImage.updateCount + this.props.beforeImage.updateCount;\n    if (currentVersion !== this.imageVersion) {\n      this.imageVersion = currentVersion;// do not request a repaint\n      const after = this.props.afterImage.data;\n      const before = this.props.beforeImage.data;\n      if (after && before) {\n        const options = {\n          output: {\n            errorType: \"movementDifferenceIntensity\",\n            // transparency: 0.7, // this makes the downloaded image transparent\n            largeImageThreshold: 1500,\n            useCrossOrigin: false,\n            outputDiff: true\n          },\n          scaleToSameSize: true,\n          ignore: \"colors\",\n        };\n        compare(before, after, options, this.resembleCallback);\n      }\n    }\n  }\n\n  resembleCallback = (error: any, data: any) => {\n    if (error) {\n      console.error(\"An error occured while comparing the images: \", error);\n    } else {\n      const diffImageData: string = data.getImageDataUrl();\n      this.props.setDiffImage(diffImageData);\n    }\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImage: state.images.before,\n    afterImage: state.images.after,\n    diffImageData: state.images.diff.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setDiffImage: (imageData: ImageData) => dispatch(setDiffImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageCompareView);\n","// Image sources\nexport const SOURCE_WEBCAM = \"Use webcam\";\nexport const SOURCE_FILE = \"Upload image\";\n\n// Image IDs\nexport const AFTER_IMAGE = \"AFTER_IMAGE\";\nexport const BEFORE_IMAGE = \"BEFORE_IMAGE\";\nexport const DIFF_IMAGE = \"DIFF_IMAGE\";\n","import React from 'react';\n\nclass InstructionsView extends React.Component {\n  render() {\n    //TODO improve\n    return (\n      <div className=\"instructions\">\n        <h2>How it works</h2>\n        <p>\n          This web application lets you detect if someone messed with your stuff. It does this by comparing pictures taken before and after you left it unsupervised.\n          Then it highlights any differences it has found.\n          (You could also use it to mess with peoples stuff and make sure that you leave it exactly like they left it. But don't do that: it's evil)\n        </p>\n        <h2>Instructions</h2>\n        <ol>\n          <li>Read these instructions</li>\n          <li>Select the settings you want to use</li>\n          <li>Take a image before you leave</li>\n          <li>Keep this website open (or download/save the image)</li>\n          <li>Take an image after you return. By default the image from before will be superimposed over the camera view to help you find the same angle / distance again</li>\n          <li>Check areas with detected changes (marked in pink)</li>\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default InstructionsView;\n","import React from 'react';\n\nclass ChooseOptionView extends React.Component<Props> {\n  static defaultValue(): string {\n    return \"\";\n  }\n\n  render() {\n    return (<select onChange={this.onChange} value={this.props.value}>\n      <option value=\"\" key={-1} disabled hidden>\n        {this.props.prompt ? this.props.prompt : \"Choose a option\"}\n      </option>\n      {this.props.options.map((value: string, i: number) => {\n        // Here using key=index should be ok, since the order should not change\n        return <option value={value} key={i}>{value}</option>;\n      })}\n    </select>);\n  }\n\n  onChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.onChange(event.target.value);\n  }\n}\n\nexport interface Props {\n  prompt?: string,\n  value: string,\n  options: string[],\n  onChange: (newValue: string) => void,\n}\n\nexport default ChooseOptionView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State as ReduxState } from './redux/store';\nimport { setImageSource } from './redux/actions';\nimport { SOURCE_WEBCAM, SOURCE_FILE } from './redux/constants';\nimport OptionView from './OptionView';\n\n\nconst SOURCES = [SOURCE_WEBCAM, SOURCE_FILE];\n\ninterface Props {\n  imageSource: string,\n  setImageSource: (value: string) => void,\n}\n\nclass SettingsView extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"settings\">\n        <h2>Settings</h2>\n        <span className=\"label\">Image source:</span>\n        <OptionView options={SOURCES} value={this.props.imageSource} onChange={this.props.setImageSource} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    imageSource: state.settings.imageSource,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setImageSource: (value: string) => dispatch(setImageSource(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { ImageData } from './redux/store';\n\nconst VIDEO_CONSTRAINTS = {//TODO request best res\n  facingMode: { ideal: \"environment\" },\n  // try to request high res images (4K, allows both landscape and portrait)\n  width: { ideal: 4096 },\n  height: { ideal: 4096 },\n}\n\ninterface Props {\n  backgroundImage?: ImageData,\n  onPhoto: (image: ImageData) => void,\n}\n\nclass TakeImageView extends React.Component<Props> {\n  webcamRef: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props);\n    this.webcamRef = React.createRef();\n  }\n\n  render() {\n    const bgImg = this.props.backgroundImage;\n    const className = \"take-image-div\" + (bgImg ? \" transparent-cam\" : \"\");\n    return (\n      <div className={className}>\n        <Webcam ref={this.webcamRef} className=\"cam\" onClick={this.onClick}\n          audio={false} videoConstraints={VIDEO_CONSTRAINTS}\n          forceScreenshotSourceSize={true} />\n        {bgImg ? <img src={bgImg} alt=\"\" onClick={this.onClick} /> : null}\n      </div>\n    );\n  }\n\n  onClick = (event: any) => {\n    let photo = this.webcamRef.current.getScreenshot();\n    this.props.onPhoto(photo);\n  }\n}\n\nexport default TakeImageView;\n","import React from 'react';\n\ninterface Props {\n  setImage: (imageDataUrl: string) => void,\n}\n\ninterface State {\n}\n\nclass ImageUrlUploader extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <input className=\"image-upload\" type='file' onChange={this.onChange} />\n    );\n  }\n\n  onChange = (e: any) => {\n    const files = e.target.files;\n    if (files && files[0]) {\n      var fileReader = new FileReader();\n      fileReader.onload = this.onFileUploaded;\n      fileReader.readAsDataURL(files[0]);\n    }\n    e.target.value = null;//clear the input; SEE https://stackoverflow.com/questions/42192346/how-to-reset-reactjs-file-input\n  }\n\n  onFileUploaded = (event: any) => {\n    this.props.setImage(event.target.result);\n  }\n}\n\nexport default ImageUrlUploader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { SOURCE_WEBCAM, SOURCE_FILE } from './redux/constants';\nimport TakeImageView from './TakeImageView';\nimport ImageUpload from './ImageUpload';\n\n\ninterface Props {\n  imageSource: string,\n  onImage: (image: ImageData) => void,\n  backgroundImage?: ImageData,\n}\n\nclass GetImageView extends React.Component<Props> {\n  render() {\n    return (\n      <div className=\"get-image\">\n        {this.renderContents()}\n      </div>\n    );\n  }\n\n  renderContents() {\n    switch (this.props.imageSource) {\n      case SOURCE_WEBCAM:\n        return <div>\n          <h2>Take a photo</h2>\n          Allow camera access and touch/click the image below.\n          <TakeImageView onPhoto={this.props.onImage} backgroundImage={this.props.backgroundImage} />;\n        </div>\n      case SOURCE_FILE:\n        return <div>\n          <h2>Upload an image</h2>\n          <ImageUpload setImage={this.props.onImage} />\n        </div>\n      default:\n        throw new Error(`Unknown image source: \"${this.props.imageSource}\"`)\n    };\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    imageSource: state.settings.imageSource,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GetImageView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ImageCompareView from './ImageCompareView';\nimport InstructionView from './steps/Instructions';\nimport SettingsView from './SettingsView';\nimport GetImageView from './GetImage';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { setAfterImage, setBeforeImage, completedCurrentStep } from './redux/actions';\nimport * as Steps from './steps/Steps';\n\n\ninterface Props {\n  setAfterImage: (imageData: ImageData) => void,\n  setBeforeImage: (imageData: ImageData) => void,\n  completeStep: () => void,\n  beforeImageData: ImageData,\n  afterImageData: ImageData,\n  step: number,\n}\n\ninterface State {\n}\n\nclass StepContentView extends React.Component<Props, State> {\n  render() {\n    return (\n      <div className=\"step-content\">\n        {this.renderContents()}\n      </div>\n    );\n  }\n\n  renderContents() {\n    switch (this.props.step) {\n      case Steps.STEP_INTRO:\n        return this.renderWithNextButton(<InstructionView />);\n      case Steps.STEP_SETTINGS:\n        return this.renderWithNextButton(<SettingsView />);\n      case Steps.STEP_BEFORE_PHOTO:\n        return <GetImageView onImage={this.takeBeforeImage} />\n      case Steps.STEP_AFTER_PHOTO:\n        return <GetImageView onImage={this.takeAfterImage} backgroundImage={this.props.beforeImageData} />\n      case Steps.STEP_COMPARE:\n        return <ImageCompareView />\n      default:\n        return <span>Error: Unknown step</span>\n    }\n  }\n\n  takeBeforeImage = (image: ImageData) => {\n    this.props.setBeforeImage(image);\n    this.props.completeStep();\n  }\n\n  takeAfterImage = (image: ImageData) => {\n    this.props.setAfterImage(image);\n    this.props.completeStep();\n  }\n\n  renderWithNextButton(component: any) {\n    return (<div>\n      {component}\n      <button className=\"next-button\" onClick={this.props.completeStep}>\n        Next step\n      </button>\n    </div>);\n  }\n}\n\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImageData: state.images.before.data,\n    afterImageData: state.images.after.data,\n    step: state.steps.current,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setBeforeImage: (imageData: ImageData) => dispatch(setBeforeImage(imageData)),\n    setAfterImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n    completeStep: () => dispatch(completedCurrentStep()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepContentView);\n","import React from 'react';\nimport StepDisplay from './StepDisplay';\nimport StepContent from './StepContentDisplay';\nimport '../css/main.scss';\n\n//TODO figure out if i should use restaints\n// add manual comarison: fadein/out, slide left/right, side by side\n// add settings persistence: local storage, url?\n// maybe add an url parameter + chooser pattern so it can be safed\n// [opt] find out how to use key events?\n\nclass MainView extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"err-msg\">\n          This website is still in pre alpha state. It is likely instable, buggy, ugly and might get broken from time to time.\n        </div>\n        <div className=\"app-contents\">\n          <StepDisplay />\n          <StepContent />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainView;\n","import * as Actions from './actions';\nimport { AFTER_IMAGE, BEFORE_IMAGE, DIFF_IMAGE } from './constants';\nimport { State, ImageState, ImageData, fallbackState } from './store';\nimport { getLastAccessibleStepIndex, assertStepInBounds } from '../steps/Steps';\n\n\nfunction reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  // state = {\n  //   ...state,\n  //   updateCounter: state.updateCounter + 1,\n  // };\n\n  switch (action.type) {\n    case Actions.SET_IMAGE: {\n      return handle_setImage(state, action);\n    }\n    case Actions.COMPLETE_STEP: {\n      return handle_completeStep(state);\n    }\n    case Actions.GO_TO_STEP: {\n      return handle_goToStep(state, action);\n    }\n    case Actions.SET_IMAGE_SOURCE: {\n      return handle_setImageSource(state, action);\n    }\n    default:\n      console.warn(`Unknown action type: \"${action.type}\"`);\n      return state;\n  }\n}\n\nfunction handle_completeStep(state: State): State {\n  let next = state.steps.current + 1;\n  if (assertStepInBounds(next)) {\n    let completed = getLastAccessibleStepIndex(next);\n    // handle cases where the user went back\n    completed = Math.max(state.steps.completed, completed);\n    return {\n      ...state,\n      steps: {\n        current: next,\n        completed: completed,\n      },\n    }\n  } else {\n    return state;\n  }\n}\n\nfunction handle_setImageSource(state: State, action: Actions.Action): State {\n  let value = (action as Actions.StringPayloadAction).payload;\n  return {\n    ...state,\n    settings: {\n      ...state.settings,\n      imageSource: value,\n    },\n  };\n}\n\nfunction handle_goToStep(state: State, action: Actions.Action): State {\n  let step = (action as Actions.GoToStepAction).payload;\n  if (assertStepInBounds(step) && step <= state.steps.completed) {\n    return {\n      ...state,\n      steps: {\n        ...state.steps,\n        current: step,\n      },\n    };\n  } else {\n    console.warn(`Can not switch to step ${step}. State: ${state.steps}`);\n    return state;\n  }\n}\n\nfunction handle_setImage(state: State, action: Actions.Action): State {\n  let payload = (action as Actions.SetImageAction).payload;\n  let imageStateCopy = { ...state.images };\n  switch (payload.imageName) {\n    case AFTER_IMAGE:\n      imageStateCopy.after = modifyImageState(imageStateCopy.after, payload.imageData);\n      break;\n    case BEFORE_IMAGE:\n      imageStateCopy.before = modifyImageState(imageStateCopy.before, payload.imageData);\n      debug_print_image_size(payload.imageData);\n      break;\n    case DIFF_IMAGE:\n      imageStateCopy.diff = modifyImageState(imageStateCopy.diff, payload.imageData);\n      break;\n    default:\n      console.warn(`Unknown image name: \"${payload.imageName}\"`);\n      return state;\n  }\n  return {\n    ...state,\n    images: imageStateCopy,\n  }\n}\n\nfunction debug_print_image_size(src: string) {\n  var img = document.createElement(\"img\");\n  img.onload = function(event) {\n    console.log(`image dimendion: ${img.naturalWidth}x${img.naturalHeight}`);\n  }\n  img.src = src;\n}\n\nfunction modifyImageState(oldSubState: ImageState, newData: ImageData) {\n  return {\n    data: newData,\n    updateCount: oldSubState.updateCount + 1,\n  };\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport reducer from './reducer';\nimport { SOURCE_WEBCAM } from './constants';\nimport { getLastAccessibleStepIndex } from '../steps/Steps';\n\nexport type ImageData = string;\n\nexport interface State {\n  images: {\n    before: ImageState,\n    after: ImageState,\n    diff: ImageState,\n  },\n  steps: {\n    current: number,\n    completed: number,\n  },\n  settings: {\n    imageSource: string,\n  },\n}\n\nexport interface ImageState {\n  data: ImageData | null,\n  updateCount: number,\n}\n\n\nconst DEFAULT_IMAGE_STATE = {\n  data: null,\n  updateCount: 0,\n};\n\nexport const fallbackState: State = {\n  images: {\n    before: DEFAULT_IMAGE_STATE,\n    after: DEFAULT_IMAGE_STATE,\n    diff: DEFAULT_IMAGE_STATE,\n  },\n  steps: {\n    current: 0,\n    completed: getLastAccessibleStepIndex(0),\n  },\n  settings: {\n    imageSource: SOURCE_WEBCAM,\n  },\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nconst store = createStore(reducer, fallbackState, devTools);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './app/Main';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n//\n// export function register(config: any) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n//\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n//\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n//\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n//\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n//\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n//\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}