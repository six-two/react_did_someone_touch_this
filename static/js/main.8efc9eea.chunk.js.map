{"version":3,"sources":["app/redux/actions.ts","app/ImageCompareView.tsx","app/TakeImageView.tsx","app/Main.tsx","app/redux/reducer.ts","app/redux/store.ts","index.tsx","serviceWorker.ts"],"names":["setImage","imageName","imageData","type","payload","ImageCompareView","props","imageVersion","resembleCallback","error","data","console","diffImageData","getImageDataUrl","setDiffImage","state","this","updateDiffImageIfNeeded","className","src","alt","renderImageIfExists","currentVersion","afterImage","updateCount","beforeImage","after","before","compare","output","errorType","transparency","largeImageThreshold","useCrossOrigin","outputDiff","scaleToSameSize","ignore","React","Component","connect","ownProps","diffImage","dispatch","TakeImageView","webcamRef","onClick","event","photo","current","getScreenshot","onPhoto","createRef","bgImg","backgroundImage","ref","audio","videoConstraints","VIDEO_CONSTRAINTS","facingMode","ideal","MainView","renderContents","beforeImageData","afterImageData","setAfterImage","setBeforeImage","reducer","action","warn","fallbackState","handle_setImage","DEFAULT_IMAGE_STATE","devTools","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8efc9eea.chunk.js","sourcesContent":["import { ImageData } from './store';\n\n// action types\nexport const SET_IMAGE = \"SET_IMAGE\";\nexport const AFTER_IMAGE = \"AFTER_IMAGE\";\nexport const BEFORE_IMAGE = \"BEFORE_IMAGE\";\nexport const DIFF_IMAGE = \"DIFF_IMAGE\";\n\n\n// actions\nexport interface SetImageAction {\n  type: string,\n  payload: {\n    imageName: string,\n    imageData: ImageData,\n  },\n}\n\nexport type Action = SetImageAction;\n\n// action creators\nexport function setBeforeImage(imageData: ImageData): SetImageAction {\n  return setImage(BEFORE_IMAGE, imageData);\n}\n\nexport function setAfterImage(imageData: ImageData): SetImageAction {\n  return setImage(AFTER_IMAGE, imageData);\n}\n\nexport function setDiffImage(imageData: ImageData): SetImageAction {\n  return setImage(DIFF_IMAGE, imageData);\n}\n\nfunction setImage(imageName: string, imageData: ImageData): SetImageAction {\n  return {\n    type: SET_IMAGE,\n    payload: {\n      imageName: imageName,\n      imageData: imageData,\n    },\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { compare } from 'resemblejs';\nimport { State as ReduxState, ImageState, ImageData } from './redux/store';\nimport { setDiffImage } from './redux/actions';\n\n\ninterface Props {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n  diffImageData: ImageData,\n  setDiffImage: (imageData: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass ImageCompareView extends React.Component<Props, State> {\n  imageVersion: number;\n\n  constructor(props: Props) {\n    super(props);\n    this.imageVersion = -1;\n    this.state = {};\n  }\n\n  render() {\n    this.updateDiffImageIfNeeded();\n\n    return (\n      <div className=\"images\">\n\n        <h2>Difference</h2>\n        {renderImageIfExists(this.props.diffImageData)}\n      </div>\n    );\n  }\n\n  updateDiffImageIfNeeded() {\n    const currentVersion = this.props.afterImage.updateCount + this.props.beforeImage.updateCount;\n    if (currentVersion !== this.imageVersion) {\n      this.imageVersion = currentVersion;// do not request a repaint\n      const after = this.props.afterImage.data;\n      const before = this.props.beforeImage.data;\n      if (after && before) {\n        const options = {\n          output: {\n            errorType: \"movementDifferenceIntensity\",\n            transparency: 0.7,\n            largeImageThreshold: 1500,\n            useCrossOrigin: false,\n            outputDiff: true\n          },\n          scaleToSameSize: true,\n          ignore: \"colors\",\n        };\n        compare(before, after, options, this.resembleCallback);\n      }\n    }\n  }\n\n  resembleCallback = (error: any, data: any) => {\n    if (error) {\n      console.error(\"An error occured while comparing the images: \", error);\n    } else {\n      const diffImageData: string = data.getImageDataUrl();\n      this.props.setDiffImage(diffImageData);\n    }\n  }\n}\n\nfunction renderImageIfExists(imageData: string | null | undefined) {\n  if (imageData) {\n    return <img src={imageData} alt=\"Differences between the before and after pictures\" />\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImage: state.beforeImage,\n    afterImage: state.afterImage,\n    diffImageData: state.diffImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setDiffImage: (imageData: ImageData) => dispatch(setDiffImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageCompareView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { ImageData } from './redux/store';\nimport { VIDEO_CONSTRAINTS } from './Main';\n\n\ninterface Props {\n  backgroundImage?: ImageData,\n  onPhoto: (image: ImageData) => void,\n}\n\nclass TakeImageView extends React.Component<Props> {\n  webcamRef: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props);\n    this.webcamRef = React.createRef();\n  }\n\n  render() {\n    const bgImg = this.props.backgroundImage;\n    const className = \"take-image-div\" + (bgImg ? \" transparent-cam\" : \"\");\n    return (\n      <div className={className}>\n        {bgImg ? <img src={bgImg} alt=\"\" /> : null}\n        <Webcam ref={this.webcamRef} className=\"cam\" onClick={this.onClick}\n          audio={false} videoConstraints={VIDEO_CONSTRAINTS} />\n      </div>\n    );\n  }\n\n  onClick = (event: any) => {\n    let photo = this.webcamRef.current.getScreenshot();\n    this.props.onPhoto(photo);\n  }\n}\n\nexport default TakeImageView;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../css/main.scss';\nimport ImageCompareView from './ImageCompareView';\nimport TakeImageView from './TakeImageView';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { setAfterImage, setBeforeImage } from './redux/actions';\n\n//TODO figure out if i should use restaints\n// add instructions\n// add steps and switching between them\n// add settings\n// add manual comarison: fadein/out, slide left/right, side by side\n// add settings persistence: local storage, url?\n// add downloading of photos\n// maybe add an url parameter + chooser pattern so it can be safed\n// [opt] find out how to use key events?\n\n\nexport const VIDEO_CONSTRAINTS = {//TODO request best res\n  facingMode: { ideal: \"environment\" }\n}\n\ninterface Props {\n  setAfterImage: (imageData: ImageData) => void,\n  setBeforeImage: (imageData: ImageData) => void,\n  beforeImageData: ImageData,\n  afterImageData: ImageData,\n}\n\ninterface State {\n}\n\nclass MainView extends React.Component<Props, State> {\n  render() {\n    return (\n      <div>\n        <span className=\"err-msg\">\n          This website is still in pre alpha state. It is likely instable, buggy, ugly and might get broken from time to time.\n        </span>\n        <div className=\"app-contents\">\n          {this.renderContents()}\n        </div>\n      </div>\n    );\n  }\n\n  renderContents() {\n    if (!this.props.beforeImageData) {\n      return <TakeImageView onPhoto={this.props.setBeforeImage} />\n    }\n    if (!this.props.afterImageData) {\n      return <TakeImageView onPhoto={this.props.setAfterImage} backgroundImage={this.props.beforeImageData} />\n    }\n    return <ImageCompareView />\n  }\n}\n\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImageData: state.beforeImage.data,\n    afterImageData: state.afterImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setBeforeImage: (imageData: ImageData) => dispatch(setBeforeImage(imageData)),\n    setAfterImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n","import * as Actions from './actions';\nimport { State, fallbackState } from './store';\n\n\nfunction reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  // state = {\n  //   ...state,\n  //   updateCounter: state.updateCounter + 1,\n  // };\n\n  switch (action.type) {\n    case Actions.SET_IMAGE: {\n      return handle_setImage(state, action);\n    }\n    default:\n      console.warn(`Unknown action type: \"${action.type}\"`);\n      return state;\n  }\n}\n\nfunction handle_setImage(state: State, action: Actions.Action): State {\n  let payload = (action as Actions.SetImageAction).payload;\n  switch (payload.imageName) {\n    case Actions.AFTER_IMAGE:\n      return {\n        ...state,\n        afterImage: {\n          data: payload.imageData,\n          updateCount: state.afterImage.updateCount + 1,\n        },\n      }\n    case Actions.BEFORE_IMAGE:\n      return {\n        ...state,\n        beforeImage: {\n          data: payload.imageData,\n          updateCount: state.beforeImage.updateCount + 1,\n        },\n      }\n    case Actions.DIFF_IMAGE:\n      return {\n        ...state,\n        diffImage: {\n          data: payload.imageData,\n          updateCount: state.diffImage.updateCount + 1,\n        },\n      }\n    default:\n      console.warn(`Unknown image name: \"${payload.imageName}\"`);\n      return state;\n  }\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport type ImageData = string;\n\nexport const STEPS = {\n  FIRST: 0,\n  INSTRUCTIONS: 0,\n  SETTINGS: 1,\n  BEFORE_PHOTO: 2,\n  AFTER_PHOTO: 3,\n  COMPARISON: 4,\n  LAST: 4,\n};\n\nexport interface State {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n  diffImage: ImageState,\n}\n\nexport interface ImageState {\n  data: ImageData | null,\n  updateCount: number,\n}\n\n\nconst DEFAULT_IMAGE_STATE = {\n  data: null,\n  updateCount: 0,\n};\n\nexport const fallbackState: State = {\n  beforeImage: DEFAULT_IMAGE_STATE,\n  afterImage: DEFAULT_IMAGE_STATE,\n  diffImage: DEFAULT_IMAGE_STATE,\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nconst store = createStore(reducer, fallbackState, devTools);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './app/Main';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n//\n// export function register(config: any) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n//\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n//\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n//\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n//\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n//\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n//\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}