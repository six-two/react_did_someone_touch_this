{"version":3,"sources":["app/redux/actions.ts","app/ImageCompareView.tsx","app/TakeAfterImage.tsx","app/TakeBeforeImage.tsx","app/Main.tsx","app/redux/reducer.ts","app/redux/store.ts","index.tsx","serviceWorker.ts"],"names":["setBeforeImage","imageData","setImage","setAfterImage","imageName","type","payload","ImageCompareView","props","imageVersion","resembleControl","onComplete","data","diffImageData","getImageDataUrl","setDiffImage","state","this","updateDiffImageIfNeeded","repaint","className","src","renderImageIfExists","currentVersion","afterImage","updateCount","beforeImage","after","before","resemble","compareTo","ignoreColors","scaleToSameSize","outputSettings","errorType","transparency","React","Component","connect","ownProps","diffImage","dispatch","TakeAfterImageView","webcamRef","onClick","event","photo","current","getScreenshot","createRef","beforeImageData","ref","audio","videoConstraints","VIDEO_CONSTRAINTS","TakeBeforeImageView","facingMode","ideal","MainView","renderContents","afterImageData","reducer","action","console","warn","fallbackState","DEFAULT_IMAGE_STATE","devTools","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da4f5f36.chunk.js","sourcesContent":["import { State, ImageData } from './store';\n\n// action types\nexport const SET_IMAGE = \"SET_IMAGE\";\nexport const AFTER_IMAGE = \"AFTER_IMAGE\";\nexport const BEFORE_IMAGE = \"BEFORE_IMAGE\";\nexport const DIFF_IMAGE = \"DIFF_IMAGE\";\n\n\n// actions\nexport interface SetImageAction {\n  type: string,\n  payload: {\n    imageName: string,\n    imageData: ImageData,\n  },\n}\n\nexport type Action = SetImageAction;\n\n// action creators\nexport function setBeforeImage(imageData: ImageData): SetImageAction {\n  return setImage(BEFORE_IMAGE, imageData);\n}\n\nexport function setAfterImage(imageData: ImageData): SetImageAction {\n  return setImage(AFTER_IMAGE, imageData);\n}\n\nexport function setDiffImage(imageData: ImageData): SetImageAction {\n  return setImage(DIFF_IMAGE, imageData);\n}\n\nfunction setImage(imageName: string, imageData: ImageData): SetImageAction {\n  return {\n    type: SET_IMAGE,\n    payload: {\n      imageName: imageName,\n      imageData: imageData,\n    },\n  };\n}\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport resemble from 'resemblejs';\nimport ImageUpload from './ImageUpload';\nimport { State as ReduxState, ImageState, ImageData } from './redux/store';\nimport { setDiffImage } from './redux/actions';\n\n\ninterface Props {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n  diffImageData: ImageData,\n  setDiffImage: (imageData: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass ImageCompareView extends React.Component<Props, State> {\n  imageVersion: number;\n  resembleControl: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.imageVersion = -1;\n    this.state = {};\n  }\n\n  render() {\n    this.updateDiffImageIfNeeded();\n    // <h2>Before</h2>\n    // {renderImageIfExists(this.props.beforeImage.data)}\n    // <h2>After</h2>\n    // {renderImageIfExists(this.props.afterImage.data)}\n    this.resembleControl.repaint();\n    return (\n      <div className=\"images\">\n\n        <h2>Difference</h2>\n        {renderImageIfExists(this.props.diffImageData)}\n      </div>\n    );\n  }\n\n  updateDiffImageIfNeeded() {\n    const currentVersion = this.props.afterImage.updateCount + this.props.beforeImage.updateCount;\n    if (currentVersion !== this.imageVersion) {\n      this.imageVersion = currentVersion;// do not request a repaint\n      const after = this.props.afterImage.data;\n      const before = this.props.beforeImage.data;\n      if (after && before) {\n        this.resembleControl = resemble(before)\n          .compareTo(after)\n          .ignoreColors()\n          .onComplete(this.onComplete);\n        this.resembleControl.scaleToSameSize();\n        this.resembleControl.outputSettings({\n          errorType: \"movementDifferenceIntensity\",\n          transparency: 0.5,\n        });\n        // resembleControl.repaint();\n      }\n    }\n  }\n\n  onComplete = (data: any) => {\n    const diffImageData = data.getImageDataUrl();\n    this.props.setDiffImage(diffImageData);\n  }\n}\n\nfunction renderImageIfExists(imageData: string | null | undefined) {\n  if (imageData) {\n    return <img src={imageData} />\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImage: state.beforeImage,\n    afterImage: state.afterImage,\n    diffImageData: state.diffImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setDiffImage: (imageData: ImageData) => dispatch(setDiffImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageCompareView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport { setAfterImage } from './redux/actions';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { VIDEO_CONSTRAINTS } from './Main';\n\n\ninterface Props {\n  beforeImageData: ImageData,\n  setAfterImage: (image: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass TakeAfterImageView extends React.Component<Props, State> {\n  webcamRef: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    this.webcamRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <div className=\"cam-overlay\">\n        <img src={this.props.beforeImageData} />\n        <Webcam ref={this.webcamRef} className=\"cam\" onClick={this.onClick}\n          audio={false} videoConstraints={VIDEO_CONSTRAINTS} />\n      </div>\n    );\n  }\n\n  onClick = (event: any) => {\n    let photo = this.webcamRef.current.getScreenshot();\n    this.props.setAfterImage(photo);\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImageData: state.beforeImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setAfterImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TakeAfterImageView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport { setBeforeImage } from './redux/actions';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { VIDEO_CONSTRAINTS } from './Main';\n\n\ninterface Props {\n  setBeforeImage: (image: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass TakeBeforeImageView extends React.Component<Props, State> {\n  webcamRef: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    this.webcamRef = React.createRef();\n  }\n\n  render() {\n    return <Webcam ref={this.webcamRef} className=\"cam\" onClick={this.onClick}\n      audio={false} videoConstraints={VIDEO_CONSTRAINTS} />\n  }\n\n  onClick = (event: any) => {\n    let photo = this.webcamRef.current.getScreenshot();\n    this.props.setBeforeImage(photo);\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setBeforeImage: (imageData: ImageData) => dispatch(setBeforeImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TakeBeforeImageView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport '../css/main.scss';\nimport ImageCompareView from './ImageCompareView';\nimport AfterImageTaker from './TakeAfterImage';\nimport BeforeImageTaker from './TakeBeforeImage';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { setAfterImage, setBeforeImage } from './redux/actions';\n\n//TODO figure out if i should use restaints\n// maybe add an url parameter + chooser pattern so it can be safed\n// install sass\n\n//How to store image to compare? local storage, down- and upload\n// -> up/down: +better_quality +easier_to_test\n\nexport const VIDEO_CONSTRAINTS = {//TODO request best res\n  facingMode: { ideal: \"environment\" }\n}\n\ninterface Props {\n  setAfterImage: (imageData: ImageData) => void,\n  setBeforeImage: (imageData: ImageData) => void,\n  beforeImageData: ImageData,\n  afterImageData: ImageData,\n}\n\ninterface State {\n}\n\nclass MainView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <span className=\"err-msg\">\n          This website is still in pre alpha state. It is likely instable, buggy, ugly and might get broken from time to time.\n        </span>\n        <div className=\"app-contents\">\n          {this.renderContents()}\n        </div>\n      </div>\n    );\n  }\n\n  renderContents() {\n    if (!this.props.beforeImageData) {\n      return <BeforeImageTaker />\n    }\n    if (!this.props.afterImageData) {\n      return <AfterImageTaker />\n    }\n    return <ImageCompareView />\n  }\n}\n\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImageData: state.beforeImage.data,\n    afterImageData: state.afterImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setBeforeImage: (imageData: ImageData) => dispatch(setBeforeImage(imageData)),\n    setAfterImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n","import * as Actions from './actions';\nimport { State, fallbackState } from './store';\n\n\nfunction reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  // state = {\n  //   ...state,\n  //   updateCounter: state.updateCounter + 1,\n  // };\n\n  switch (action.type) {\n    case Actions.SET_IMAGE: {\n      let payload = (action as Actions.SetImageAction).payload;\n      switch (payload.imageName) {\n        case Actions.AFTER_IMAGE:\n          return {\n            ...state,\n            afterImage: {\n              data: payload.imageData,\n              updateCount: state.afterImage.updateCount + 1,\n            },\n          }\n        case Actions.BEFORE_IMAGE:\n          return {\n            ...state,\n            beforeImage: {\n              data: payload.imageData,\n              updateCount: state.beforeImage.updateCount + 1,\n            },\n          }\n        case Actions.DIFF_IMAGE:\n          return {\n            ...state,\n            diffImage: {\n              data: payload.imageData,\n              updateCount: state.diffImage.updateCount + 1,\n            },\n          }\n        default:\n          console.warn(`Unknown image name: \"${payload.imageName}\"`);\n      }\n    }\n    default:\n      console.warn(`Unknown action type: \"${action.type}\"`);\n  }\n  return state;\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport type ImageData = string;\n\nexport interface State {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n  diffImage: ImageState,\n}\n\nexport interface ImageState {\n  data: ImageData | null,\n  updateCount: number,\n}\n\n\nconst DEFAULT_IMAGE_STATE = {\n  data: null,\n  updateCount: 0,\n};\n\nexport const fallbackState: State = {\n  beforeImage: DEFAULT_IMAGE_STATE,\n  afterImage: DEFAULT_IMAGE_STATE,\n  diffImage: DEFAULT_IMAGE_STATE,\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nconst store = createStore(reducer, fallbackState, devTools);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './app/Main';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n//\n// export function register(config: any) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n//\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n//\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n//\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n//\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n//\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n//\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}