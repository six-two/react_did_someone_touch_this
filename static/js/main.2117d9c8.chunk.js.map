{"version":3,"sources":["app/UploadAndCompare.tsx","app/ImageTaker.tsx","app/redux/actions.ts","app/Main.tsx","app/redux/reducer.ts","app/redux/store.ts","index.tsx","serviceWorker.ts"],"names":["UploadAndCompareView","props","onComplete","data","setState","diffImage","getImageDataUrl","state","imageVersion","this","updateDiffImageIfNeeded","className","imageData","src","renderImageIfExists","currentVersion","afterImage","updateCount","beforeImage","after","before","resemble","compareTo","ignoreColors","React","Component","connect","ownProps","dispatch","ImageTaker","webcamRef","onClick","event","photo","current","getScreenshot","setImage","createRef","ref","audio","videoConstraints","VIDEO_CONSTRAINTS","imageName","type","payload","facingMode","ideal","MainView","toggle_running","running","renderContents","beforeImageData","setAfterImage","UploadAndCompare","setBeforeImage","reducer","action","console","warn","fallbackState","devTools","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2117d9c8.chunk.js","sourcesContent":["import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport resemble from 'resemblejs';\nimport ImageUpload from './ImageUpload';\nimport { State as ReduxState, ImageState } from './redux/store';\n\n\ninterface Props {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n}\n\ninterface State {\n  imageVersion: number,\n  diffImage?: string,\n}\n\nclass UploadAndCompareView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { imageVersion: -1 };\n  }\n\n  render() {\n    this.updateDiffImageIfNeeded();\n    // <h2>Before</h2>\n    // {renderImageIfExists(this.props.beforeImage.data)}\n    // <h2>After</h2>\n    // {renderImageIfExists(this.props.afterImage.data)}\n    return (\n      <div className=\"images\">\n\n        <h2>Difference</h2>\n        {renderImageIfExists(this.state.diffImage)}\n      </div>\n    );\n  }\n\n  updateDiffImageIfNeeded() {\n    const currentVersion = this.props.afterImage.updateCount + this.props.beforeImage.updateCount;\n    if (currentVersion !== this.state.imageVersion) {\n      this.setState({ imageVersion: currentVersion });\n      const after = this.props.afterImage.data;\n      const before = this.props.beforeImage.data;\n      if (after && before) {\n        let resembleControl: any = resemble(before)\n          .compareTo(after)\n          .onComplete(this.onComplete);\n        resembleControl.ignoreColors();\n      }\n    }\n  }\n\n  onComplete = (data: any) => {\n    this.setState({ diffImage: data.getImageDataUrl() });\n  }\n}\n\nfunction renderImageIfExists(imageData: string | null | undefined) {\n  if (imageData) {\n    return <img src={imageData} />\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImage: state.beforeImage,\n    afterImage: state.afterImage,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadAndCompareView);\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport { setAfterImage } from './redux/actions';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { VIDEO_CONSTRAINTS } from './Main';\n\n\ninterface Props {\n  setImage: (image: ImageData) => void,\n}\n\ninterface State {\n}\n\nclass ImageTaker extends React.Component<Props, State> {\n  webcamRef: React.RefObject<any>;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    this.webcamRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <div>\n        <Webcam ref={this.webcamRef} className=\"cam\" audio={false} videoConstraints={VIDEO_CONSTRAINTS} />\n        <br />\n        <button onClick={this.onClick}>Take photo</button>\n      </div>\n    );\n  }\n\n  onClick = (event: any) => {\n    let photo = this.webcamRef.current.getScreenshot();\n    this.props.setImage(photo);\n  }\n}\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    image: state.afterImage,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    // setImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n  };\n};\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ImageTaker);\n export default ImageTaker;\n","import { State, ImageData } from './store';\n\n// action types\nexport const SET_IMAGE = \"SET_BEFORE_IMAGE\";\nexport const AFTER_IMAGE = \"SET_AFTER_IMAGE\";\nexport const BEFORE_IMAGE = \"SET_BEFORE_IMAGE\";\n\n// actions\nexport interface SetImageAction {\n  type: string,\n  payload: {\n    imageName: string,\n    imageData: ImageData,\n  },\n}\n\nexport type Action = SetImageAction;\n\n// action creators\nexport function setBeforeImage(imageData: ImageData): SetImageAction {\n  return setImage(BEFORE_IMAGE, imageData);\n}\n\nexport function setAfterImage(imageData: ImageData): SetImageAction {\n  return setImage(AFTER_IMAGE, imageData);\n}\n\nfunction setImage(imageName: string, imageData: ImageData): SetImageAction {\n  return {\n    type: SET_IMAGE,\n    payload: {\n      imageName: imageName,\n      imageData: imageData,\n    },\n  };\n}\n","import React from 'react';\nimport Webcam from \"react-webcam\";\nimport { connect } from 'react-redux';\nimport '../css/main.scss';\nimport UploadAndCompare from './UploadAndCompare';\nimport ImageTaker from './ImageTaker';\nimport { State as ReduxState, ImageData } from './redux/store';\nimport { setAfterImage, setBeforeImage } from './redux/actions';\n\n//TODO figure out if i should use restaints\n// maybe add an url parameter + chooser pattern so it can be safed\n// install sass\n\n//How to store image to compare? local storage, down- and upload\n// -> up/down: +better_quality +easier_to_test\n\nexport const VIDEO_CONSTRAINTS = {//TODO request best res\n  facingMode: { ideal: \"environment\" }\n}\n\ninterface Props {\n  setAfterImage: (imageData: ImageData) => void,\n  setBeforeImage: (imageData: ImageData) => void,\n  beforeImageData: ImageData,\n}\n\ninterface State {\n  running: boolean,\n}\n\nclass MainView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { running: false }\n  }\n\n  toggle_running = () => {\n    this.setState({ running: !this.state.running });\n  }\n\n  render() {\n    return (\n      <div className=\"root\">\n        <span className=\"err-msg\">\n          This website is still in pre alpha state. It is likely instable, buggy, ugly and might get broken from time to time.\n        </span>\n        <div className=\"app-contents\">\n          {this.renderContents()}\n        </div>\n      </div>\n    );\n  }\n\n  renderContents() {\n    if (!this.props.beforeImageData) {\n      return <ImageTaker setImage={this.props.setBeforeImage} />\n    }\n    return (\n      <div>\n        <div className=\"cam-overlay\">\n          <img src={this.props.beforeImageData} />\n          <ImageTaker setImage={this.props.setAfterImage} />\n        </div>\n        <UploadAndCompare />\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state: ReduxState, ownProps: any) => {\n  return {\n    ...ownProps,\n    beforeImageData: state.beforeImage.data,\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setBeforeImage: (imageData: ImageData) => dispatch(setBeforeImage(imageData)),\n    setAfterImage: (imageData: ImageData) => dispatch(setAfterImage(imageData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n","import * as Actions from './actions';\nimport { State, fallbackState } from './store';\n\n\nfunction reducer(state: State | undefined, action: Actions.Action): State {\n  if (!state) {\n    console.warn(\"No state was supplied to reducer. Falling back to default values\");\n    state = fallbackState;\n  }\n\n  // state = {\n  //   ...state,\n  //   updateCounter: state.updateCounter + 1,\n  // };\n\n  switch (action.type) {\n    case Actions.SET_IMAGE: {\n      let payload = (action as Actions.SetImageAction).payload;\n      switch (payload.imageName) {\n        case Actions.AFTER_IMAGE:\n          return {\n            ...state,\n            afterImage: {\n              data: payload.imageData,\n              updateCount: state.afterImage.updateCount + 1,\n            },\n          }\n        case Actions.BEFORE_IMAGE:\n          return {\n            ...state,\n            beforeImage: {\n              data: payload.imageData,\n              updateCount: state.beforeImage.updateCount + 1,\n            },\n          }\n        default:\n          console.warn(`Unknown image name: \"${payload.imageName}\"`);\n      }\n    }\n    default:\n      console.warn(`Unknown action type: \"${action.type}\"`);\n  }\n  return state;\n}\n\nexport default reducer\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport type ImageData = string;\n\nexport interface State {\n  beforeImage: ImageState,\n  afterImage: ImageState,\n}\n\nexport interface ImageState {\n  data: ImageData | null,\n  updateCount: number,\n}\n\n\nexport const fallbackState: State = {\n  beforeImage: {\n    data: null,\n    updateCount: 0,\n  },\n  afterImage: {\n    data: null,\n    updateCount: 0,\n  },\n}\n\nlet devTools = undefined;\nif ((window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n  // Redux dev tools are available\n  let devToolOptions = {\n    trace: false,\n    traceLimit: 25\n  };\n  devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__(devToolOptions);\n}\n\nconst store = createStore(reducer, fallbackState, devTools);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './app/Main';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n//\n// export function register(config: any) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n//\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n//\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n//\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n//\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n//\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n//\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}